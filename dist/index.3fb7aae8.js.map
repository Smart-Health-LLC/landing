{"mappings":"AAAA,qDAAqD;AACrD,eAAe;AACf,qDAAqD;AAErD,MAAM;IACJ,YAAY,EAAE,CAAE;QACd,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI;IACrC;IACA,QAAQ,OAAO,EAAE;QACf,MAAM,UAAU,IAAI,CAAC,EAAE,CAAC,SAAS;QACjC,MAAM,SAAS,KAAK,GAAG,CAAC,QAAQ,MAAM,EAAE,QAAQ,MAAM;QACtD,MAAM,UAAU,IAAI,QAAQ,CAAC,UAAY,IAAI,CAAC,OAAO,GAAG;QACxD,IAAI,CAAC,KAAK,GAAG,EAAE;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,QAAQ,IAAK;YAC/B,MAAM,OAAO,OAAO,CAAC,EAAE,IAAI;YAC3B,MAAM,KAAK,OAAO,CAAC,EAAE,IAAI;YACzB,MAAM,QAAQ,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;YACzC,MAAM,MAAM,QAAQ,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;YAC/C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBAAE;gBAAM;gBAAI;gBAAO;YAAI;QACzC;QACA,qBAAqB,IAAI,CAAC,YAAY;QACtC,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,MAAM;QACX,OAAO;IACT;IACA,SAAS;QACP,IAAI,SAAS;QACb,IAAI,WAAW;QACf,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,GAAG,IAAK;YACjD,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE;YAClD,IAAI,IAAI,CAAC,KAAK,IAAI,KAAK;gBACrB;gBACA,UAAU;YACZ,OAAO,IAAI,IAAI,CAAC,KAAK,IAAI,OAAO;gBAC9B,IAAI,CAAC,QAAQ,KAAK,MAAM,KAAK,MAAM;oBACjC,OAAO,IAAI,CAAC,UAAU;oBACtB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,GAAG;gBACvB;gBACA,UAAU,CAAC,kBAAkB,EAAE,KAAK,OAAO,CAAC;YAC9C,OACE,UAAU;QAEd;QACA,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG;QACpB,IAAI,aAAa,IAAI,CAAC,KAAK,CAAC,MAAM,EAChC,IAAI,CAAC,OAAO;aACP;YACL,IAAI,CAAC,YAAY,GAAG,sBAAsB,IAAI,CAAC,MAAM;YACrD,IAAI,CAAC,KAAK;QACZ;IACF;IACA,aAAa;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;IAClE;AACF;AAGA,MAAM,UAAU;IACd;CACD;AAED,MAAM,KAAK,SAAS,aAAa,CAAC;AAClC,MAAM,KAAK,IAAI,aAAa;AAE5B,IAAI,UAAU;AACd,MAAM,OAAO;IACX,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;QAChC,WAAW,MAAM;IACnB;IACA,UAAU,AAAC,CAAA,UAAU,CAAA,IAAK,QAAQ,MAAM;AAC1C;AAEA","sources":["assets/js/text-scrumble.js"],"sourcesContent":["// ——————————————————————————————————————————————————\r\n// TextScramble\r\n// ——————————————————————————————————————————————————\r\n\r\nclass TextScramble {\r\n  constructor(el) {\r\n    this.el = el\r\n    this.chars = '!<>-_\\\\/[]{}—=+*^?#________'\r\n    this.update = this.update.bind(this)\r\n  }\r\n  setText(newText) {\r\n    const oldText = this.el.innerText\r\n    const length = Math.max(oldText.length, newText.length)\r\n    const promise = new Promise((resolve) => this.resolve = resolve)\r\n    this.queue = []\r\n    for (let i = 0; i < length; i++) {\r\n      const from = oldText[i] || ''\r\n      const to = newText[i] || ''\r\n      const start = Math.floor(Math.random() * 40)\r\n      const end = start + Math.floor(Math.random() * 40)\r\n      this.queue.push({ from, to, start, end })\r\n    }\r\n    cancelAnimationFrame(this.frameRequest)\r\n    this.frame = 0\r\n    this.update()\r\n    return promise\r\n  }\r\n  update() {\r\n    let output = ''\r\n    let complete = 0\r\n    for (let i = 0, n = this.queue.length; i < n; i++) {\r\n      let { from, to, start, end, char } = this.queue[i]\r\n      if (this.frame >= end) {\r\n        complete++\r\n        output += to\r\n      } else if (this.frame >= start) {\r\n        if (!char || Math.random() < 0.28) {\r\n          char = this.randomChar()\r\n          this.queue[i].char = char\r\n        }\r\n        output += `<span class=\"dud\">${char}</span>`\r\n      } else {\r\n        output += from\r\n      }\r\n    }\r\n    this.el.innerHTML = output\r\n    if (complete === this.queue.length) {\r\n      this.resolve()\r\n    } else {\r\n      this.frameRequest = requestAnimationFrame(this.update)\r\n      this.frame++\r\n    }\r\n  }\r\n  randomChar() {\r\n    return this.chars[Math.floor(Math.random() * this.chars.length)]\r\n  }\r\n}\r\n\r\n\r\nconst phrases = [\r\n  \"В активной разработке\"\r\n]\r\n\r\nconst el = document.querySelector('.text')\r\nconst fx = new TextScramble(el)\r\n\r\nlet counter = 0\r\nconst next = () => {\r\n  fx.setText(phrases[counter]).then(() => {\r\n    setTimeout(next, 3800)\r\n  })\r\n  counter = (counter + 1) % phrases.length\r\n}\r\n\r\nnext()"],"names":[],"version":3,"file":"index.3fb7aae8.js.map","sourceRoot":"/__parcel_source_root/"}